steps:
#  master: "push deploy new"
  
  - id: "build image"
    name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}", "."]

  - id: "push image"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}"]

  - id: "deploy prod service"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    #secretEnv: ['SEC1', 'SEC2', 'SEC3', 'SEC4']
    args:
      [
        "run",
        "deploy",
        "${_SERVICE_NAME}",
        "--platform",
        "managed",
        "--region",
        "${_REGION}",
        "--allow-unauthenticated",
        "--image",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}",
      ]
  
  # Force the new revision to serve 100% of traffic.
  - id: "ensure prod service live"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      [
        "run",
        "services",
        "update-traffic",
        "${_SERVICE_NAME}",
        "--to-latest",
        "--platform",
        "managed",
        "--region",
        "${_REGION}",
      ]

substitutions:
  _SERVICE_NAME: cartwire-binservice-master
  _REGION: europe-west1
#availableSecrets:
#      secretManager:
#      - versionName: projects/${PROJECT_ID}/secrets/DB_CONNECT/versions/1
#        env: 'SEC1'
#      - versionName: projects/${PROJECT_ID}/secrets/DB_CONNECT_CW_ANALYTICS/versions/1
#        env: 'SEC2'
#      - versionName: projects/${PROJECT_ID}/secrets/DB_CONNECT_CW_SCRAPING_DB/versions/1
#        env: 'SEC3'
#      - versionName: projects/${PROJECT_ID}/secrets/DB_CONNECT_CW_PORTAL/versions/1
#        env: 'SEC4'